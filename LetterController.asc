// new module script
#define NLETTERS 11
Timer * doFallLetter[NLETTERS];
Direction FallLetter_dir[NLETTERS];

int k;
Character * ar_letter[NLETTERS];

void shouldLetterBeTrashed(Character * cALetter){
  if(cALetter.Room == player.Room && (cALetter.x < 1 || 
                                cALetter.x > GAMEW-1 || 
                                      cALetter.y < 1 ||
                                      cALetter.y > GAMEH-1)){
    cALetter.ChangeRoom(TRASH);
  }
}

void game_start(){
  ar_letter[0] = cLetter1;
  ar_letter[1] = cLetter2;
  ar_letter[2] = cLetter3;
  ar_letter[3] = cLetter4;
  ar_letter[4] = cLetter5;
  ar_letter[5] = cLetter6;
  ar_letter[6] = cLetter7;
  ar_letter[7] = cLetter8;
  ar_letter[8] = cLetter9;
  ar_letter[9] = cLetter10;
  ar_letter[10] = cLetter11;
}


void TrashLetters(){
  int i=0;
  while(i<NLETTERS){
    shouldLetterBeTrashed(ar_letter[i]);    
    i++;
  }  
}

void ForceTrashLetters(){
  int i=0;
  while(i<NLETTERS){
    ar_letter[i].ChangeRoom(TRASH);    
    i++;
  }  
}

void ThrowLetter(int x,  int y, CharacterDirection direction){
  Character * LetterChar;
  
  int i=0;
  while(i<NLETTERS){
    if(ar_letter[i].Room == TRASH){
      if(direction == eDirectionRight){
        ar_letter[i].ChangeRoom(player.Room, x+8, y);
      } else {        
        ar_letter[i].ChangeRoom(player.Room, x-8, y);
      }
      LetterChar = ar_letter[i];
      break;
    }
    i++;
  }
    
  if(LetterChar == null){
    TrashLetters();
    i=0;
    while(i<NLETTERS){
      if(ar_letter[i].Room == TRASH){
        if(direction == eDirectionRight){
          ar_letter[i].ChangeRoom(player.Room, x+8, y);
        } else {        
          ar_letter[i].ChangeRoom(player.Room, x-8, y);
        }
        LetterChar = ar_letter[i];
        break;
      }
      i++;
    }
    if(LetterChar == null){
      return;
    }
  }  
    
  LetterChar.Animate(0, 2, eRepeat, eNoBlock, eForwards);
  if(direction == eDirectionLeft){
    LetterChar.TweenPosition(0.4, x-40, y-40, eEaseOutExpoTween, eNoBlockTween);
    doFallLetter[i] = Timer.StartRT(0.41);
    FallLetter_dir[i] = eDirectionLeft;
    //LetterChar.TweenPosition(0.8, x-GAMEW, y+35, eEaseLinearTween, eNoBlockTween, 0.47);
    
    //LetterChar.TweenX(1.2, x-GAMEW, eEaseLinearTween, eNoBlockTween);
    //LetterChar.TweenY(0.4, y-40, eEaseOutExpoTween, eNoBlockTween);
   // LetterChar.TweenY(0.8, y+35, eEaseLinearTween, eNoBlockTween, 0.47);
  } else {
  // must be right
    //LetterChar.TweenX(1.2, x+GAMEW, eEaseLinearTween, eNoBlockTween);
   // LetterChar.TweenY(0.4, y-40, eEaseOutExpoTween, eNoBlockTween);
   // LetterChar.TweenY(0.8, y+35, eEaseLinearTween, eNoBlockTween, 0.47);
    LetterChar.TweenPosition(0.4, x+40, y-40, eEaseOutExpoTween, eNoBlockTween);
    doFallLetter[i] = Timer.StartRT(0.41);
    FallLetter_dir[i] = eDirectionRight;
    //LetterChar.TweenPosition(0.8, x+GAMEW, y+35, eEaseLinearTween, eNoBlockTween, 0.47);
  }
  
}


Character * whichLetterCollided(){
  int i=0;
  while(i<NLETTERS){
    if(ar_letter[i].Room == cDog.Room && ar_letter[i].IsCollidingWithChar(cDog)){
      return ar_letter[i];
    }
    i++;
  }
  
  return null;
}

void repeatedly_execute_always(){
  int i=0;
  while(i<NLETTERS){
    if(doFallLetter[i] != null && doFallLetter[i].EvtExpired){
      if(FallLetter_dir[i] == eDirectionLeft){
        ar_letter[i].TweenPosition(0.8, ar_letter[i].x-GAMEW+40, ar_letter[i].y+210, eEaseLinearTween, eNoBlockTween);
      } else {
        ar_letter[i].TweenPosition(0.8, ar_letter[i].x+GAMEW-40, ar_letter[i].y+210, eEaseLinearTween, eNoBlockTween);
      }
      doFallLetter[i] = null;
    }
    i++;
  }  
  
  k++;
  if(k>120){
    k=0;
    
    TrashLetters();
  }
}


void on_event (EventType event, int data){
  if(event == eEventLeaveRoom){
    ForceTrashLetters(); 
  }
}