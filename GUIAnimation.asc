
BlockingStyle GUIAnimation_BlockingStyle[]; // whether the GUI animation blocks other scripts
RepeatStyle GUIAnimation_RepeatStyle[]; // whether the GUI animation repeats
Direction GUIAnimation_Direction[]; // the direction of the GUI animation
int GUIAnimation_Delay[]; // the delay passed to GUI.Animate
int GUIAnimation_DelayTimer[]; // timer between frames in GUI animation (only used by non-blocking)
int GUIAnimation_Frame[]; // the current GUI animation frame
int GUIAnimation_Loop[]; // the current GUI animation loop
int GUIAnimation_View[]; // the current GUI animation view
int GUIAnimation_NormalGraphic[]; // the background graphic prior to GUI animation
bool GUIAnimation_Animating[]; // whether the GUI is actively animating
DynamicSprite *GUIAnimation_Sprite[]; // provides flipped sprite support for GUI animation
int GUIAnimation_Graphic[]; // the sprite number of the current frame used for GUI animation (helper for flipped sprites)

void UnlockView(this GUI*, bool restoreGraphic) { // stop animation and (optionally) restore the normal background graphic to the GUI
  GUIAnimation_BlockingStyle[this.ID] = eNoBlock; // reset our variables to the defaults
  GUIAnimation_Delay[this.ID] = 0;
  GUIAnimation_DelayTimer[this.ID] = 0;
  GUIAnimation_Direction[this.ID] = eForwards;
  GUIAnimation_Frame[this.ID] = 0;
  GUIAnimation_Loop[this.ID] = 0;
  GUIAnimation_RepeatStyle[this.ID] = eOnce;
  GUIAnimation_View[this.ID] = 0;
  GUIAnimation_Animating[this.ID] = false;
  GUIAnimation_Graphic[this.ID] = 0;
  if (restoreGraphic) { // if restoring the previous graphic
    this.BackgroundGraphic = GUIAnimation_NormalGraphic[this.ID]; // restore the normal background graphic
    if (GUIAnimation_Sprite[this.ID] != null) GUIAnimation_Sprite[this.ID].Delete(); // clean out unused sprites
    GUIAnimation_Sprite[this.ID] = null; // clear the pointer
    // if we aren't restoring the graphic this DynamicSprite may still be in use!
  }
  GUIAnimation_NormalGraphic[this.ID] = 0;
}

function game_start() {
  // initialize our arrays
  GUIAnimation_BlockingStyle = new BlockingStyle[Game.GUICount];
  GUIAnimation_Delay = new int[Game.GUICount];
  GUIAnimation_DelayTimer = new int[Game.GUICount];
  GUIAnimation_Direction = new Direction[Game.GUICount];
  GUIAnimation_Frame = new int[Game.GUICount];
  GUIAnimation_Loop = new int[Game.GUICount];
  GUIAnimation_NormalGraphic = new int[Game.GUICount];
  GUIAnimation_RepeatStyle = new RepeatStyle[Game.GUICount];
  GUIAnimation_View = new int[Game.GUICount];
  GUIAnimation_Animating = new bool[Game.GUICount];
  GUIAnimation_Sprite = new DynamicSprite[Game.GUICount];
  GUIAnimation_Graphic = new int[Game.GUICount];
  int i = 0;
  while (i < Game.GUICount) {
    gui[i].UnlockView(false); // initialize our variables
    i++;
  }
}

void LockView(this GUI*, int view) {
  if ((view <= 0) || (view > Game.ViewCount)) return;
  this.UnlockView(false); // reset all settings first
  GUIAnimation_View[this.ID] = view; // set the view
  GUIAnimation_NormalGraphic[this.ID] = this.BackgroundGraphic; // and store the normal graphic
}

bool IsAnimating(this GUI*) { // check whether the GUI is actively animating
  return (GUIAnimation_Animating[this.ID] != false);
}

void DoAnimation(this GUI*) { // this function will perform the actual work of switching the frames
  if (!this.IsAnimating()) return; // if this GUI isn't animating, return
  int i = this.ID;
  int view = GUIAnimation_View[i], loop = GUIAnimation_Loop[i], frame = GUIAnimation_Frame[i];
  int frameCount = Game.GetFrameCountForLoop(view, loop);
  if (GUIAnimation_BlockingStyle[i] == eBlock) { // if this GUI is animating and blocking
    bool doOnce = true; // loop here at least once
    while ((GUIAnimation_RepeatStyle[i] == eRepeat) || (doOnce)) {
      doOnce = false; // entered loop once, we only continue looping if repeating the animation
      ViewFrame *vframe = Game.GetViewFrame(view, loop, frame);
      int delay = (GUIAnimation_Delay[i] + vframe.Speed); // get the current delay
      if (delay) Wait(delay); // using Wait provides the "blocking" functionality
      else Wait(1); // delay will probably be at least 1, but we need to be sure
      if (GUIAnimation_Direction[i] == eForwards) { // if animating forwards
        while (frame < frameCount) { // loop through all the frames
          if (GUIAnimation_Sprite[this.ID] != null) { // if there is a dynamic sprite alloted, release it
            this.BackgroundGraphic = 0; // make sure to change this before deleting the sprite!
            GUIAnimation_Sprite[this.ID].Delete();
            GUIAnimation_Sprite[this.ID] = null;
          }
          GUIAnimation_Frame[this.ID] = frame;
          GUIAnimation_Graphic[this.ID] = vframe.Graphic; // store this frame's sprite slot
          if (vframe.Flipped) { // if the sprite is flipped, we need to use a dynamic sprite
            GUIAnimation_Sprite[this.ID] = DynamicSprite.CreateFromExistingSprite(vframe.Graphic);
            GUIAnimation_Sprite[this.ID].Flip(eFlipLeftToRight);
            GUIAnimation_Graphic[this.ID] = GUIAnimation_Sprite[this.ID].Graphic;
          }
          this.BackgroundGraphic = GUIAnimation_Graphic[this.ID]; // update the GUI's graphic with the new frame
          #ifver 3.2 // if there is an associated sound, play it
          if (vframe.LinkedAudio != null) vframe.LinkedAudio.Play();
          #endif
          #ifnver 3.2
          if (vframe.Sound) PlaySound(vframe.Sound);
          #endif
          frame++;
          if (frame < frameCount) { // if we haven't reached the end of the loop yet, update our variables
            vframe = Game.GetViewFrame(view, loop, frame);
            delay = (GUIAnimation_Delay[i] + vframe.Speed);
            if (delay) Wait(delay);
          }
        }
        frame = 0;
        if (GUIAnimation_RepeatStyle[this.ID] == eRepeat) { // if the animation is repeating, do it over
          vframe = Game.GetViewFrame(view, loop, frame);
          if (GUIAnimation_Sprite[this.ID] != null) {
            this.BackgroundGraphic = 0;
            GUIAnimation_Sprite[this.ID].Delete();
            GUIAnimation_Sprite[this.ID] = null;
          }
          GUIAnimation_Frame[this.ID] = frame;
          GUIAnimation_Graphic[this.ID] = vframe.Graphic;
          if (vframe.Flipped) {
            GUIAnimation_Sprite[this.ID] = DynamicSprite.CreateFromExistingSprite(vframe.Graphic);
            GUIAnimation_Sprite[this.ID].Flip(eFlipLeftToRight);
            GUIAnimation_Graphic[this.ID] = GUIAnimation_Sprite[this.ID].Graphic;
          }
          this.BackgroundGraphic = GUIAnimation_Graphic[this.ID];
          #ifver 3.2
          if (vframe.LinkedAudio != null) vframe.LinkedAudio.Play();
          #endif
          #ifnver 3.2
          if (vframe.Sound) PlaySound(vframe.Sound);
          #endif
        }
      }
      else { // if we're animating backwards
        while (frame >= 0) {
          if (GUIAnimation_Sprite[this.ID] != null) {
            this.BackgroundGraphic = 0;
            GUIAnimation_Sprite[this.ID].Delete();
            GUIAnimation_Sprite[this.ID] = null;
          }
          GUIAnimation_Frame[this.ID] = frame;
          GUIAnimation_Graphic[this.ID] = vframe.Graphic;
          if (vframe.Flipped) {
            GUIAnimation_Sprite[this.ID] = DynamicSprite.CreateFromExistingSprite(vframe.Graphic);
            GUIAnimation_Sprite[this.ID].Flip(eFlipLeftToRight);
            GUIAnimation_Graphic[this.ID] = GUIAnimation_Sprite[this.ID].Graphic;
          }
          this.BackgroundGraphic = GUIAnimation_Graphic[this.ID];
          #ifver 3.2
          if (vframe.LinkedAudio != null) vframe.LinkedAudio.Play();
          #endif
          #ifnver 3.2
          if (vframe.Sound) PlaySound(vframe.Sound);
          #endif
          frame--;
          if (frame >= 0) {
            vframe = Game.GetViewFrame(view, loop, frame);
            delay = (GUIAnimation_Delay[i] + vframe.Speed);
            if (delay) Wait(delay);
          }
        }
        frame = (frameCount - 1);
        if (GUIAnimation_RepeatStyle[this.ID] == eRepeat) {
          vframe = Game.GetViewFrame(view, loop, frame);
          if (GUIAnimation_Sprite[this.ID] != null) {
            this.BackgroundGraphic = 0;
            GUIAnimation_Sprite[this.ID].Delete();
            GUIAnimation_Sprite[this.ID] = null;
          }
          GUIAnimation_Frame[this.ID] = frame;
          GUIAnimation_Graphic[this.ID] = vframe.Graphic;
          if (vframe.Flipped) {
            GUIAnimation_Sprite[this.ID] = DynamicSprite.CreateFromExistingSprite(vframe.Graphic);
            GUIAnimation_Sprite[this.ID].Flip(eFlipLeftToRight);
            GUIAnimation_Graphic[this.ID] = GUIAnimation_Sprite[this.ID].Graphic;
          }
          this.BackgroundGraphic = GUIAnimation_Graphic[this.ID];
          #ifver 3.2
          if (vframe.LinkedAudio != null) vframe.LinkedAudio.Play();
          #endif
          #ifnver 3.2
          if (vframe.Sound) PlaySound(vframe.Sound);
          #endif
        }
      }
    }
    GUIAnimation_Animating[this.ID] = false;
    return;
  } // end blocking
  if (GUIAnimation_DelayTimer[i]) { // if our timer hasn't expired, decrease it
    GUIAnimation_DelayTimer[i]--;
    return; // wait for the timer to expire before we continue animating this GUI
  }
  if ((GUIAnimation_Direction[i] == eForwards) && (frame < frameCount)) { // animating forward
    frame++;
    if ((frame == frameCount) && (GUIAnimation_RepeatStyle[i] == eRepeat)) frame = 0;
    if (frame < frameCount) {
      ViewFrame *vframe = Game.GetViewFrame(view, loop, frame);
      GUIAnimation_DelayTimer[i] = (GUIAnimation_Delay[i] + vframe.Speed);
      if (GUIAnimation_Sprite[this.ID] != null) {
        this.BackgroundGraphic = 0;
        GUIAnimation_Sprite[this.ID].Delete();
        GUIAnimation_Sprite[this.ID] = null;
      }
      GUIAnimation_Frame[this.ID] = frame;
      GUIAnimation_Graphic[this.ID] = vframe.Graphic;
      if (vframe.Flipped) {
        GUIAnimation_Sprite[this.ID] = DynamicSprite.CreateFromExistingSprite(vframe.Graphic);
        GUIAnimation_Sprite[this.ID].Flip(eFlipLeftToRight);
        GUIAnimation_Graphic[this.ID] = GUIAnimation_Sprite[this.ID].Graphic;
      }
      this.BackgroundGraphic = GUIAnimation_Graphic[this.ID];
      #ifver 3.2
      if (vframe.LinkedAudio != null) vframe.LinkedAudio.Play();
      #endif
      #ifnver 3.2
      if (vframe.Sound) PlaySound(vframe.Sound);
      #endif
    }
    else GUIAnimation_Animating[this.ID] = false;
    GUIAnimation_Frame[i] = frame;
  }
  else if ((GUIAnimation_Direction[i] == eBackwards) && (frame >= 0)) { // animating backwards
    frame--;
    if ((frame == -1) && (GUIAnimation_RepeatStyle[i] == eRepeat)) frame = (frameCount - 1);
    if (frame >= 0) {
      ViewFrame *vframe = Game.GetViewFrame(view, loop, frame);
      GUIAnimation_DelayTimer[i] = (GUIAnimation_Delay[i] + vframe.Speed);
      if (GUIAnimation_Sprite[this.ID] != null) {
        this.BackgroundGraphic = 0;
        GUIAnimation_Sprite[this.ID].Delete();
        GUIAnimation_Sprite[this.ID] = null;
      }
      GUIAnimation_Frame[this.ID] = frame;
      GUIAnimation_Graphic[this.ID] = vframe.Graphic;
      if (vframe.Flipped) {
        GUIAnimation_Sprite[this.ID] = DynamicSprite.CreateFromExistingSprite(vframe.Graphic);
        GUIAnimation_Sprite[this.ID].Flip(eFlipLeftToRight);
        GUIAnimation_Graphic[this.ID] = GUIAnimation_Sprite[this.ID].Graphic;
      }
      this.BackgroundGraphic = GUIAnimation_Graphic[this.ID];
      #ifver 3.2
      if (vframe.LinkedAudio != null) vframe.LinkedAudio.Play();
      #endif
      #ifnver 3.2
      if (vframe.Sound) PlaySound(vframe.Sound);
      #endif
    }
    else GUIAnimation_Animating[this.ID] = false;
    GUIAnimation_Frame[i] = frame;
  }
}

void Animate(this GUI*, int loop, int delay, RepeatStyle repeat, BlockingStyle block, Direction direction) { // animate the GUI just like Character.Animate
  if (!GUIAnimation_View[this.ID]) { // no view set
    // error handling...?
    return;
  }
  if ((loop < 0) || (loop >= Game.GetLoopCountForView(GUIAnimation_View[this.ID]))) loop = 0;
  if ((delay < 0) || (delay > 150000)) delay = 0;
  GUIAnimation_Loop[this.ID] = loop;
  GUIAnimation_Frame[this.ID] = 0;
  if (direction == eBackwards) GUIAnimation_Frame[this.ID] = (Game.GetFrameCountForLoop(GUIAnimation_View[this.ID], loop) - 1);
  ViewFrame *vframe = Game.GetViewFrame(GUIAnimation_View[this.ID], loop, 0);
  GUIAnimation_Delay[this.ID] = delay;
  GUIAnimation_DelayTimer[this.ID] = (delay + vframe.Speed);
  GUIAnimation_RepeatStyle[this.ID] = repeat;
  GUIAnimation_Direction[this.ID] = direction;
  GUIAnimation_NormalGraphic[this.ID] = this.BackgroundGraphic;
  GUIAnimation_BlockingStyle[this.ID] = block;
  GUIAnimation_Animating[this.ID] = true;
  if (block == eBlock) {
    this.DoAnimation();
    return;
  }
  if (GUIAnimation_Sprite[this.ID] != null) {
    this.BackgroundGraphic = 0;
    GUIAnimation_Sprite[this.ID].Delete();
    GUIAnimation_Sprite[this.ID] = null;
  }
  GUIAnimation_Graphic[this.ID] = vframe.Graphic;
  if (vframe.Flipped) {
    GUIAnimation_Sprite[this.ID] = DynamicSprite.CreateFromExistingSprite(vframe.Graphic);
    GUIAnimation_Sprite[this.ID].Flip(eFlipLeftToRight);
    GUIAnimation_Graphic[this.ID] = GUIAnimation_Sprite[this.ID].Graphic;
  }
  this.BackgroundGraphic = GUIAnimation_Graphic[this.ID];
  #ifver 3.2
  if (vframe.LinkedAudio != null) vframe.LinkedAudio.Play();
  #endif
  #ifnver 3.2
  if (vframe.Sound) PlaySound(vframe.Sound);
  #endif
}

int GetView(this GUI*) { // returns the view this GUI is locked to
  return GUIAnimation_View[this.ID];
}

int GetLoop(this GUI*) { // returns the loop this GUI is animating in
  if (!this.IsAnimating()) return -1;
  return GUIAnimation_Loop[this.ID];
}

int GetFrame(this GUI*) { // returns the currently displayed frame of the GUI animation
  if (!this.IsAnimating()) return -1;
  return GUIAnimation_Frame[this.ID];
}

ViewFrame* GetViewFrame(this GUI*) { // returns the ViewFrame object for the GUI's current view, loop, and frame
  int view = GUIAnimation_View[this.ID], loop = GUIAnimation_Loop[this.ID], frame = GUIAnimation_Frame[this.ID];
  if ((view <= 0) || (view > Game.ViewCount) || (loop < 0) || (loop >= Game.GetLoopCountForView(view)) ||
  (frame < 0) || (frame >= Game.GetFrameCountForLoop(view, loop)) || (!this.IsAnimating())) return null;
  return Game.GetViewFrame(view, loop, frame);
}

function repeatedly_execute_always() {
  int i = 0;
  while (i < Game.GUICount) {
    if (GUIAnimation_BlockingStyle[i] == eNoBlock) gui[i].DoAnimation(); // update our non-blocking animations
    i++;
  }
}
