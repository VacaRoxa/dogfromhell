// FakeScreen module script
__FakeScreen FakeScreen;
export FakeScreen;

DynamicSprite * FakeSprite;
export FakeSprite;
bool gEnabled = false;

struct SThingToDraw
{
  int objIndex;
  int chrIndex;
  int baseLine;
};

SThingToDraw gThingsToDraw[128];

function do_once()
{
  int numThingsToDraw = 0;
  int i = 0;
  while (i < Room.ObjectCount)
  {
    int baseLine = object[i].Baseline;
    if (baseLine == 0)
    {
      baseLine = object[i].Y;
    }

    if(object[i].Visible){
      gThingsToDraw[numThingsToDraw].objIndex = i;
      gThingsToDraw[numThingsToDraw].chrIndex = -1;
      gThingsToDraw[numThingsToDraw].baseLine = baseLine;
      numThingsToDraw++;
    }
    i++;
  }
  i = 0;

  while (i < Game.CharacterCount)
  {
    if (character[i].Room == player.Room)
    {
      int baseLine = character[i].Baseline;
      if (baseLine == 0)
      {
        baseLine = character[i].y;
      }
      gThingsToDraw[numThingsToDraw].objIndex = -1;
      gThingsToDraw[numThingsToDraw].chrIndex = i;
      gThingsToDraw[numThingsToDraw].baseLine = baseLine;
      numThingsToDraw++;
    }
    i++;
  }

  // now bubble sort
  i = 0;
  while (i < numThingsToDraw-1)
  {
    int j = i+1;
    while (j < numThingsToDraw)
    {
      if (gThingsToDraw[j].baseLine < gThingsToDraw[i].baseLine)
      {
        // swap
        int objIndex = gThingsToDraw[j].objIndex;
        int chrIndex = gThingsToDraw[j].chrIndex;
        int baseLine = gThingsToDraw[j].baseLine;
        gThingsToDraw[j].objIndex = gThingsToDraw[i].objIndex;
        gThingsToDraw[j].chrIndex = gThingsToDraw[i].chrIndex;
        gThingsToDraw[j].baseLine = gThingsToDraw[i].baseLine;
        gThingsToDraw[i].objIndex = objIndex;
        gThingsToDraw[i].chrIndex = chrIndex;
        gThingsToDraw[i].baseLine = baseLine;          
      }
      j++;
    }
    i++;
  }
  
  // draw
  DynamicSprite *bg = DynamicSprite.CreateFromBackground();
  DrawingSurface *surf = FakeSprite.GetDrawingSurface();
  surf.DrawImage(-GetViewportX(), -GetViewportY(), bg.Graphic);
  bg.Delete();
  i = 0;
  while (i < numThingsToDraw)
  {
    int objIndex = gThingsToDraw[i].objIndex;
    int chrIndex = gThingsToDraw[i].chrIndex;
    int baseLine = gThingsToDraw[i].baseLine;
    if (objIndex != -1)
    {
      int graphic = object[objIndex].Graphic;
      int height = Game.SpriteHeight[graphic];
      if (!object[objIndex].IgnoreScaling)
      {
        int scaling = GetScalingAt(object[objIndex].X, object[objIndex].Y);
        if (scaling != 100)
        {
          height = FloatToInt(IntToFloat(height*scaling)/100.0);
        }
      }
      
      if(object[objIndex].GetProperty("overlay")==1){
        surf.Release();
        DrawSprite(FakeSprite.Graphic, graphic, object[objIndex].X -GetViewportX(), object[objIndex].Y - height -GetViewportY(), 10, object[objIndex].Transparency);
        surf = FakeSprite.GetDrawingSurface();
      } else {
        surf.DrawImage(object[objIndex].X -GetViewportX(), object[objIndex].Y - height -GetViewportY(), graphic, object[objIndex].Transparency);
      }

    }

    else
    {
      ViewFrame *frame = Game.GetViewFrame(character[chrIndex].View, character[chrIndex].Loop, character[chrIndex].Frame);
      DynamicSprite *sprite;
      int graphic = frame.Graphic;
      if (frame.Flipped)
      {
        sprite = DynamicSprite.CreateFromExistingSprite(graphic);
        sprite.Flip(eFlipLeftToRight);
        graphic = sprite.Graphic;
      }
      if(character[chrIndex].TintRed+character[chrIndex].TintGreen+character[chrIndex].TintBlue > 3){
        if(sprite== null){
          sprite = DynamicSprite.CreateFromExistingSprite(graphic);  
        }
        sprite.Tint(character[chrIndex].TintRed, character[chrIndex].TintGreen, character[chrIndex].TintBlue, character[chrIndex].TintSaturation, character[chrIndex].TintLuminance);
        graphic = sprite.Graphic;
      }
      int height = FloatToInt(IntToFloat(Game.SpriteHeight[graphic]*character[chrIndex].Scaling)/100.0);
      int width  = FloatToInt(IntToFloat( Game.SpriteWidth[graphic]*character[chrIndex].Scaling)/100.0);
      surf.DrawImage(character[chrIndex].x - width/2 -GetViewportX(), character[chrIndex].y - height - character[chrIndex].z  -GetViewportY(), graphic, character[chrIndex].Transparency, width, height);
      if(sprite!= null){
        sprite.Delete();
      }
    }
    i++;
  }
  surf.Release();
}


bool __FakeScreen::isEnabled()
{
  return gEnabled;
}


function __FakeScreen::Enable()

{

  gEnabled = true;

  FakeSprite = DynamicSprite.Create(GWIDTH, GHEIGHT,  true);



  do_once();

}



function __FakeScreen::Disable()

{

  if(gEnabled){

    gEnabled = false;

    FakeSprite.Delete();

  }

}



function repeatedly_execute_always()

{

  if (gEnabled && !Game.SkippingCutscene)

  {

    do_once();

  }

}



function on_event(EventType event, int data){

    if(event == eEventLeaveRoom){

      FakeScreen.Disable();

    }

}